# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.2, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class Approval(msrest.serialization.Model):
    """Approval.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. An enumeration. Possible values include: "new", "pending", "canceled",
     "approved", "needs_id_verification", "denied".
    :type status: str or ~fraud_service.models.Status
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Approval, self).__init__(**kwargs)
        self.status = kwargs['status']


class BankAccount(msrest.serialization.Model):
    """BankAccount.

    All required parameters must be populated in order to send to Azure.

    :param token: Required. Token.
    :type token: str
    :param account_holder_name: Required. Account Holder Name.
    :type account_holder_name: str
    :param account_holder_email: Required. Account Holder Email.
    :type account_holder_email: str
    :param bank_name: Required. Bank Name.
    :type bank_name: str
    """

    _validation = {
        'token': {'required': True},
        'account_holder_name': {'required': True},
        'account_holder_email': {'required': True},
        'bank_name': {'required': True},
    }

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'account_holder_name': {'key': 'account_holder_name', 'type': 'str'},
        'account_holder_email': {'key': 'account_holder_email', 'type': 'str'},
        'bank_name': {'key': 'bank_name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BankAccount, self).__init__(**kwargs)
        self.token = kwargs['token']
        self.account_holder_name = kwargs['account_holder_name']
        self.account_holder_email = kwargs['account_holder_email']
        self.bank_name = kwargs['bank_name']


class Card(msrest.serialization.Model):
    """Card.

    All required parameters must be populated in order to send to Azure.

    :param token: Required. Token.
    :type token: str
    :param type: Required. Type.
    :type type: str
    :param bin_number: Required. Bin Number.
    :type bin_number: str
    :param card_holder_name: Required. Card Holder Name.
    :type card_holder_name: str
    :param card_holder_email: Required. Card Holder Email.
    :type card_holder_email: str
    :param expiry_month: Required. Expiry Month.
    :type expiry_month: int
    :param expiry_year: Required. Expiry Year.
    :type expiry_year: int
    :param postal_code: Required. Postal Code.
    :type postal_code: str
    :param card_last4: Card Last4.
    :type card_last4: str
    :param finger_print: Finger Print.
    :type finger_print: str
    """

    _validation = {
        'token': {'required': True},
        'type': {'required': True},
        'bin_number': {'required': True},
        'card_holder_name': {'required': True},
        'card_holder_email': {'required': True},
        'expiry_month': {'required': True},
        'expiry_year': {'required': True},
        'postal_code': {'required': True},
    }

    _attribute_map = {
        'token': {'key': 'token', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'bin_number': {'key': 'bin_number', 'type': 'str'},
        'card_holder_name': {'key': 'card_holder_name', 'type': 'str'},
        'card_holder_email': {'key': 'card_holder_email', 'type': 'str'},
        'expiry_month': {'key': 'expiry_month', 'type': 'int'},
        'expiry_year': {'key': 'expiry_year', 'type': 'int'},
        'postal_code': {'key': 'postal_code', 'type': 'str'},
        'card_last4': {'key': 'card_last4', 'type': 'str'},
        'finger_print': {'key': 'finger_print', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Card, self).__init__(**kwargs)
        self.token = kwargs['token']
        self.type = kwargs['type']
        self.bin_number = kwargs['bin_number']
        self.card_holder_name = kwargs['card_holder_name']
        self.card_holder_email = kwargs['card_holder_email']
        self.expiry_month = kwargs['expiry_month']
        self.expiry_year = kwargs['expiry_year']
        self.postal_code = kwargs['postal_code']
        self.card_last4 = kwargs.get('card_last4', None)
        self.finger_print = kwargs.get('finger_print', None)


class FraudEvent(msrest.serialization.Model):
    """FraudEvent.

    All required parameters must be populated in order to send to Azure.

    :param user_id: Required. User Id.
    :type user_id: int
    :param event: Required. Event.
    :type event: str
    :param ip: Ip.
    :type ip: str
    :param session_id: Session Id.
    :type session_id: str
    :param browser: Any object.
    :type browser: object
    :param device_id: Device Id.
    :type device_id: str
    :param user_agent: User Agent.
    :type user_agent: str
    :param request_uuid: Request Uuid.
    :type request_uuid: str
    :param country_iso_code: Country Iso Code.
    :type country_iso_code: str
    :param city_code: City Code.
    :type city_code: str
    :param original_state: Any object.
    :type original_state: object
    :param object_state: Any object.
    :type object_state: object
    :param extra_data: Any object.
    :type extra_data: object
    :param user_email: User Email.
    :type user_email: str
    :param name: Name.
    :type name: str
    :param phone_hash: Phone Hash.
    :type phone_hash: str
    :param referrer_user_id: Referrer User Id.
    :type referrer_user_id: str
    :param campaign_content_id: Campaign Content Id.
    :type campaign_content_id: str
    :param campaign_status: Campaign Status.
    :type campaign_status: str
    :param campaign_profile: Any object.
    :type campaign_profile: object
    :param campaign_summary: Campaign Summary.
    :type campaign_summary: str
    :param campaign_summary_unsafe: Campaign Summary Unsafe.
    :type campaign_summary_unsafe: str
    :param campaign_creation_name: Campaign Creation Name.
    :type campaign_creation_name: str
    :param campaign_pay_per_name: Campaign Pay Per Name.
    :type campaign_pay_per_name: str
    :param campaign_one_liner: Campaign One Liner.
    :type campaign_one_liner: str
    :param campaign_main_video_url: Campaign Main Video Url.
    :type campaign_main_video_url: str
    :param campaign_main_video_embed: Campaign Main Video Embed.
    :type campaign_main_video_embed: str
    :param campaign_thanks_video_url: Campaign Thanks Video Url.
    :type campaign_thanks_video_url: str
    :param campaign_thanks_video_embed: Campaign Thanks Video Embed.
    :type campaign_thanks_video_embed: str
    :param campaign_thanks_msg: Campaign Thanks Msg.
    :type campaign_thanks_msg: str
    :param campaign_thanks_msg_unsafe: Campaign Thanks Msg Unsafe.
    :type campaign_thanks_msg_unsafe: str
    :param campaign_is_monthly: Campaign Is Monthly.
    :type campaign_is_monthly: bool
    :param campaign_is_nsfw: Campaign Is Nsfw.
    :type campaign_is_nsfw: bool
    :param campaign_created_at: Campaign Created At.
    :type campaign_created_at: str
    :param campaign_published_at: Campaign Published At.
    :type campaign_published_at: str
    :param campaign_reverted_at: Campaign Reverted At.
    :type campaign_reverted_at: str
    :param campaign_is_frozen: Campaign Is Frozen.
    :type campaign_is_frozen: bool
    :param campaign_is_pre_paid: Campaign Is Pre Paid.
    :type campaign_is_pre_paid: bool
    :param campaign_is_cuf: Campaign Is Cuf.
    :type campaign_is_cuf: bool
    :param campaign_is_plural: Campaign Is Plural.
    :type campaign_is_plural: bool
    :param campaign_charge_upfront_enabled_at: Campaign Charge Upfront Enabled At.
    :type campaign_charge_upfront_enabled_at: str
    :param campaign_earnings_visibility: Campaign Earnings Visibility.
    :type campaign_earnings_visibility: str
    :param campaign_display_patron_goals: Campaign Display Patron Goals.
    :type campaign_display_patron_goals: str
    :param campaign_fee_schedule_id: Campaign Fee Schedule Id.
    :type campaign_fee_schedule_id: str
    :param campaign_age_days: Campaign Age Days.
    :type campaign_age_days: int
    :param campaign_pledge_sum10_weeks: Campaign Pledge Sum 10 Weeks.
    :type campaign_pledge_sum10_weeks: float
    :param campaign_pledge_sum1_day: Campaign Pledge Sum 1 Day.
    :type campaign_pledge_sum1_day: float
    :param campaign_total_rewards_count: Campaign Total Rewards Count.
    :type campaign_total_rewards_count: int
    :param campaign_total_goals_count: Campaign Total Goals Count.
    :type campaign_total_goals_count: int
    :param campaign_total_patron_goals_count: Campaign Total Patron Goals Count.
    :type campaign_total_patron_goals_count: int
    :param current_balance: Current Balance.
    :type current_balance: int
    :param service: Service.
    :type service: str
    :param merchant_name: Merchant Name.
    :type merchant_name: str
    :param fingerprint: Fingerprint.
    :type fingerprint: str
    :param payment_methods: Payment Methods.
    :type payment_methods: list[object]
    :param login_status: Login Status.
    :type login_status: str
    :param verification_status: Verification Status.
    :type verification_status: str
    :param verification_type: Verification Type.
    :type verification_type: str
    :param post_content_id: Post Content Id.
    :type post_content_id: str
    :param post_status: Post Status.
    :type post_status: str
    :param post_type: Post Type.
    :type post_type: str
    :param post: Any object.
    :type post: object
    :param post_activity_title: Post Activity Title.
    :type post_activity_title: str
    :param post_activity_content: Post Activity Content.
    :type post_activity_content: str
    :param post_comment_count: Post Comment Count.
    :type post_comment_count: str
    :param post_min_cents_pledged_to_view: Post Min Cents Pledged To View.
    :type post_min_cents_pledged_to_view: str
    :param post_like_count: Post Like Count.
    :type post_like_count: str
    :param post_link_url: Post Link Url.
    :type post_link_url: str
    :param post_link_domain: Post Link Domain.
    :type post_link_domain: str
    :param post_link_subject: Post Link Subject.
    :type post_link_subject: str
    :param post_link_description: Post Link Description.
    :type post_link_description: str
    :param post_link_embed: Post Link Embed.
    :type post_link_embed: str
    :param post_is_paid: Post Is Paid.
    :type post_is_paid: bool
    :param post_was_posted_by_campaign_owner: Post Was Posted By Campaign Owner.
    :type post_was_posted_by_campaign_owner: bool
    :param user_name: User Name.
    :type user_name: str
    :param amount: Amount.
    :type amount: int
    :param currency_code: Currency Code.
    :type currency_code: str
    :param expedited_shipping: Expedited Shipping.
    :type expedited_shipping: bool
    :param items: Items.
    :type items: list[object]
    :param shipping_method: Shipping Method.
    :type shipping_method: str
    :param is_first_time_buyer: Is First Time Buyer.
    :type is_first_time_buyer: bool
    :param charge_cadence: Charge Cadence.
    :type charge_cadence: str
    :param creator_user_id: Creator User Id.
    :type creator_user_id: int
    :param creator_name: Creator Name.
    :type creator_name: str
    :param patronage_amount: Patronage Amount.
    :type patronage_amount: int
    :param campaign_total_patrons: Campaign Total Patrons.
    :type campaign_total_patrons: int
    :param campaign_total_pledged: Campaign Total Pledged.
    :type campaign_total_pledged: int
    :param campaign_pledge_ratio: Campaign Pledge Ratio.
    :type campaign_pledge_ratio: str
    :param reward_pledge_ratio: Reward Pledge Ratio.
    :type reward_pledge_ratio: float
    :param reward_pledge_offset: Reward Pledge Offset.
    :type reward_pledge_offset: float
    :param exemptions: Exemptions.
    :type exemptions: list[object]
    :param creator_exemptions: Creator Exemptions.
    :type creator_exemptions: list[object]
    :param total_pledge_amount_usd: Total Pledge Amount Usd.
    :type total_pledge_amount_usd: int
    :param campaign_owner: Campaign Owner.
    :type campaign_owner: bool
    :param teammates: Teammates.
    :type teammates: list[object]
    :param campaign_age_seconds: Campaign Age Seconds.
    :type campaign_age_seconds: float
    :param campaign_currency_code: Campaign Currency Code.
    :type campaign_currency_code: str
    :param campaign_has_intro_video: Campaign Has Intro Video.
    :type campaign_has_intro_video: bool
    :param campaign_has_youtube_video_in_about: Campaign Has Youtube Video In About.
    :type campaign_has_youtube_video_in_about: bool
    :param campaign_id: Campaign Id.
    :type campaign_id: int
    :param campaign_is_per_post: Campaign Is Per Post.
    :type campaign_is_per_post: bool
    :param campaign_launched_age_seconds: Campaign Launched Age Seconds.
    :type campaign_launched_age_seconds: float
    :param campaign_new_pledges10_week_count: Campaign New Pledges 10 Week Count.
    :type campaign_new_pledges10_week_count: int
    :param campaign_new_pledges10_week_usd: Campaign New Pledges 10 Week Usd.
    :type campaign_new_pledges10_week_usd: int
    :param campaign_new_pledges1_day_count: Campaign New Pledges 1 Day Count.
    :type campaign_new_pledges1_day_count: int
    :param campaign_new_pledges1_day_usd: Campaign New Pledges 1 Day Usd.
    :type campaign_new_pledges1_day_usd: int
    :param campaign_new_pledges1_hour_count: Campaign New Pledges 1 Hour Count.
    :type campaign_new_pledges1_hour_count: int
    :param campaign_new_pledges1_hour_usd: Campaign New Pledges 1 Hour Usd.
    :type campaign_new_pledges1_hour_usd: int
    :param campaign_new_pledges1_week_count: Campaign New Pledges 1 Week Count.
    :type campaign_new_pledges1_week_count: int
    :param campaign_new_pledges1_week_usd: Campaign New Pledges 1 Week Usd.
    :type campaign_new_pledges1_week_usd: int
    :param campaign_new_pledges5_min_count: Campaign New Pledges 5 Min Count.
    :type campaign_new_pledges5_min_count: int
    :param campaign_new_pledges5_min_usd: Campaign New Pledges 5 Min Usd.
    :type campaign_new_pledges5_min_usd: int
    :param campaign_page_word_count: Campaign Page Word Count.
    :type campaign_page_word_count: int
    :param campaign_patrons_fraudsters: Campaign Patrons Fraudsters.
    :type campaign_patrons_fraudsters: int
    :param campaign_patrons_not_fraudsters: Campaign Patrons Not Fraudsters.
    :type campaign_patrons_not_fraudsters: int
    :param campaign_post_count: Campaign Post Count.
    :type campaign_post_count: int
    :param campaign_reading_grade_level: Campaign Reading Grade Level.
    :type campaign_reading_grade_level: float
    :param campaign_thanks_word_count: Campaign Thanks Word Count.
    :type campaign_thanks_word_count: int
    :param campaign_tier_count: Campaign Tier Count.
    :type campaign_tier_count: int
    :param campaign_tier_word_count: Campaign Tier Word Count.
    :type campaign_tier_word_count: int
    :param created_at: Created At.
    :type created_at: str
    :param creator_account_age_seconds: Creator Account Age Seconds.
    :type creator_account_age_seconds: float
    :param creator_campaigns_followed_count: Creator Campaigns Followed Count.
    :type creator_campaigns_followed_count: int
    :param creator_email_age_score: Creator Email Age Score.
    :type creator_email_age_score: int
    :param creator_email_domain: Creator Email Domain.
    :type creator_email_domain: str
    :param creator_email_local_pattern: Creator Email Local Pattern.
    :type creator_email_local_pattern: str
    :param creator_email_local_zxcvbn_guesses_log10: Creator Email Local Zxcvbn Guesses Log10.
    :type creator_email_local_zxcvbn_guesses_log10: float
    :param creator_email_local_zxcvbn_score: Creator Email Local Zxcvbn Score.
    :type creator_email_local_zxcvbn_score: float
    :param creator_external_service_has_discord_oauth: Creator External Service Has Discord Oauth.
    :type creator_external_service_has_discord_oauth: bool
    :param creator_external_service_has_facebook_oauth: Creator External Service Has Facebook
     Oauth.
    :type creator_external_service_has_facebook_oauth: bool
    :param creator_external_service_has_instagram_oauth: Creator External Service Has Instagram
     Oauth.
    :type creator_external_service_has_instagram_oauth: bool
    :param creator_external_service_has_reddit_oauth: Creator External Service Has Reddit Oauth.
    :type creator_external_service_has_reddit_oauth: bool
    :param creator_external_service_has_twitch_oauth: Creator External Service Has Twitch Oauth.
    :type creator_external_service_has_twitch_oauth: bool
    :param creator_external_service_has_twitter_oauth: Creator External Service Has Twitter Oauth.
    :type creator_external_service_has_twitter_oauth: bool
    :param creator_external_service_has_youtube_oauth: Creator External Service Has Youtube Oauth.
    :type creator_external_service_has_youtube_oauth: bool
    :param creator_has_sms_verification: Creator Has Sms Verification.
    :type creator_has_sms_verification: bool
    :param creator_most_recent_ip_address_city: Creator Most Recent Ip Address City.
    :type creator_most_recent_ip_address_city: str
    :param creator_most_recent_ip_address_country: Creator Most Recent Ip Address Country.
    :type creator_most_recent_ip_address_country: str
    :param creator_payment_instrument_added_count: Creator Payment Instrument Added Count.
    :type creator_payment_instrument_added_count: int
    :param creator_payouts10_week_count: Creator Payouts 10 Week Count.
    :type creator_payouts10_week_count: int
    :param creator_payouts10_week_usd: Creator Payouts 10 Week Usd.
    :type creator_payouts10_week_usd: float
    :param creator_payouts1_day_count: Creator Payouts 1 Day Count.
    :type creator_payouts1_day_count: int
    :param creator_payouts1_day_usd: Creator Payouts 1 Day Usd.
    :type creator_payouts1_day_usd: int
    :param creator_payouts1_hour_count: Creator Payouts 1 Hour Count.
    :type creator_payouts1_hour_count: int
    :param creator_payouts1_hour_usd: Creator Payouts 1 Hour Usd.
    :type creator_payouts1_hour_usd: int
    :param creator_payouts1_week_count: Creator Payouts 1 Week Count.
    :type creator_payouts1_week_count: int
    :param creator_payouts1_week_usd: Creator Payouts 1 Week Usd.
    :type creator_payouts1_week_usd: float
    :param creator_payouts5_min_count: Creator Payouts 5 Min Count.
    :type creator_payouts5_min_count: int
    :param creator_payouts5_min_usd: Creator Payouts 5 Min Usd.
    :type creator_payouts5_min_usd: int
    :param creator_paypal_instument_local_fuzz_ratio: Creator Paypal Instument Local Fuzz Ratio.
    :type creator_paypal_instument_local_fuzz_ratio: int
    :param creator_paypal_instument_matches_email: Creator Paypal Instument Matches Email.
    :type creator_paypal_instument_matches_email: bool
    :param creator_paypal_instument_matches_email_domain: Creator Paypal Instument Matches Email
     Domain.
    :type creator_paypal_instument_matches_email_domain: bool
    :param creator_phone_score: Creator Phone Score.
    :type creator_phone_score: int
    :param creator_phone_type: Creator Phone Type.
    :type creator_phone_type: str
    :param creator_recent_sift_payment_abuse_score: Creator Recent Sift Payment Abuse Score.
    :type creator_recent_sift_payment_abuse_score: float
    :param creator_recent_sift_payment_abuse_score_age_seconds: Creator Recent Sift Payment Abuse
     Score Age Seconds.
    :type creator_recent_sift_payment_abuse_score_age_seconds: float
    :param creator_recent_sift_payment_abuse_score_reason: Creator Recent Sift Payment Abuse Score
     Reason.
    :type creator_recent_sift_payment_abuse_score_reason: str
    :param creator_recent_sift_score_age_seconds: Creator Recent Sift Score Age Seconds.
    :type creator_recent_sift_score_age_seconds: float
    :param creator_recent_sift_score_legacy: Creator Recent Sift Score Legacy.
    :type creator_recent_sift_score_legacy: float
    :param creator_recent_sift_score_reason: Creator Recent Sift Score Reason.
    :type creator_recent_sift_score_reason: str
    :param fired_at: Fired At.
    :type fired_at: float
    :param ip_address: Ip Address.
    :type ip_address: str
    :param ip_address_city: Ip Address City.
    :type ip_address_city: str
    :param ip_address_country: Ip Address Country.
    :type ip_address_country: str
    :param lifetime_payouts_amount_usd: Lifetime Payouts Amount Usd.
    :type lifetime_payouts_amount_usd: float
    :param lifetime_payouts_count: Lifetime Payouts Count.
    :type lifetime_payouts_count: str
    :param patron_account_age_seconds: Patron Account Age Seconds.
    :type patron_account_age_seconds: float
    :param patron_campaigns_followed_count: Patron Campaigns Followed Count.
    :type patron_campaigns_followed_count: int
    :param patron_creator_email_local_fuzz_ratio: Patron Creator Email Local Fuzz Ratio.
    :type patron_creator_email_local_fuzz_ratio: int
    :param patron_email_domain: Patron Email Domain.
    :type patron_email_domain: str
    :param patron_email_local_pattern: Patron Email Local Pattern.
    :type patron_email_local_pattern: str
    :param patron_email_local_zxcvbn_guesses_log10: Patron Email Local Zxcvbn Guesses Log10.
    :type patron_email_local_zxcvbn_guesses_log10: float
    :param patron_email_local_zxcvbn_score: Patron Email Local Zxcvbn Score.
    :type patron_email_local_zxcvbn_score: int
    :param patron_external_service_has_discord_oauth: Patron External Service Has Discord Oauth.
    :type patron_external_service_has_discord_oauth: bool
    :param patron_external_service_has_facebook_oauth: Patron External Service Has Facebook Oauth.
    :type patron_external_service_has_facebook_oauth: bool
    :param patron_external_service_has_instagram_oauth: Patron External Service Has Instagram
     Oauth.
    :type patron_external_service_has_instagram_oauth: bool
    :param patron_external_service_has_reddit_oauth: Patron External Service Has Reddit Oauth.
    :type patron_external_service_has_reddit_oauth: bool
    :param patron_external_service_has_twitch_oauth: Patron External Service Has Twitch Oauth.
    :type patron_external_service_has_twitch_oauth: bool
    :param patron_external_service_has_twitter_oauth: Patron External Service Has Twitter Oauth.
    :type patron_external_service_has_twitter_oauth: bool
    :param patron_external_service_has_youtube_oauth: Patron External Service Has Youtube Oauth.
    :type patron_external_service_has_youtube_oauth: bool
    :param patron_has_campaign: Patron Has Campaign.
    :type patron_has_campaign: bool
    :param patron_has_sms_verification: Patron Has Sms Verification.
    :type patron_has_sms_verification: bool
    :param patron_payment_instrument_added_count: Patron Payment Instrument Added Count.
    :type patron_payment_instrument_added_count: int
    :param patron_payment_instrument_age_seconds: Patron Payment Instrument Age Seconds.
    :type patron_payment_instrument_age_seconds: float
    :param patron_recent_sift_payment_abuse_score: Patron Recent Sift Payment Abuse Score.
    :type patron_recent_sift_payment_abuse_score: float
    :param patron_recent_sift_payment_abuse_score_age_seconds: Patron Recent Sift Payment Abuse
     Score Age Seconds.
    :type patron_recent_sift_payment_abuse_score_age_seconds: float
    :param patron_recent_sift_payment_abuse_score_reason: Patron Recent Sift Payment Abuse Score
     Reason.
    :type patron_recent_sift_payment_abuse_score_reason: str
    :param patron_recent_sift_score_age_seconds: Patron Recent Sift Score Age Seconds.
    :type patron_recent_sift_score_age_seconds: float
    :param patron_recent_sift_score_legacy: Patron Recent Sift Score Legacy.
    :type patron_recent_sift_score_legacy: float
    :param patron_recent_sift_score_reason: Patron Recent Sift Score Reason.
    :type patron_recent_sift_score_reason: str
    :param patron_user_id: Patron User Id.
    :type patron_user_id: int
    :param payment_instrument_last_four: Payment Instrument Last Four.
    :type payment_instrument_last_four: int
    :param payment_instrument_merchant: Payment Instrument Merchant.
    :type payment_instrument_merchant: str
    :param payment_instrument_other_user_count: Payment Instrument Other User Count.
    :type payment_instrument_other_user_count: int
    :param payment_instrument_service: Payment Instrument Service.
    :type payment_instrument_service: str
    :param payout_instrument_added: Payout Instrument Added.
    :type payout_instrument_added: bool
    :param pledge_amount_cents: Pledge Amount Cents.
    :type pledge_amount_cents: int
    :param pledge_amount_usd: Pledge Amount Usd.
    :type pledge_amount_usd: int
    :param pledge_has_tier: Pledge Has Tier.
    :type pledge_has_tier: bool
    :param pledge_tier_amount_usd: Pledge Tier Amount Usd.
    :type pledge_tier_amount_usd: int
    :param snapshot_id: Snapshot Id.
    :type snapshot_id: str
    :param user_agent_browser: User Agent Browser.
    :type user_agent_browser: str
    :param user_agent_device: User Agent Device.
    :type user_agent_device: str
    :param user_agent_os: User Agent Os.
    :type user_agent_os: str
    :param user_agent_os_version: User Agent Os Version.
    :type user_agent_os_version: str
    :param user_pledge_to_creators_fraudsters: User Pledge To Creators Fraudsters.
    :type user_pledge_to_creators_fraudsters: int
    :param user_pledge_to_creators_not_fraudsters: User Pledge To Creators Not Fraudsters.
    :type user_pledge_to_creators_not_fraudsters: int
    :param payment_instrument_country_code: Payment Instrument Country Code.
    :type payment_instrument_country_code: str
    :param version: Version.
    :type version: int
    """

    _validation = {
        'user_id': {'required': True},
        'event': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'user_id', 'type': 'int'},
        'event': {'key': 'event', 'type': 'str'},
        'ip': {'key': 'ip', 'type': 'str'},
        'session_id': {'key': 'session_id', 'type': 'str'},
        'browser': {'key': 'browser', 'type': 'object'},
        'device_id': {'key': 'device_id', 'type': 'str'},
        'user_agent': {'key': 'user_agent', 'type': 'str'},
        'request_uuid': {'key': 'request_uuid', 'type': 'str'},
        'country_iso_code': {'key': 'country_iso_code', 'type': 'str'},
        'city_code': {'key': 'city_code', 'type': 'str'},
        'original_state': {'key': 'original_state', 'type': 'object'},
        'object_state': {'key': 'object_state', 'type': 'object'},
        'extra_data': {'key': 'extra_data', 'type': 'object'},
        'user_email': {'key': 'user_email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'phone_hash': {'key': 'phone_hash', 'type': 'str'},
        'referrer_user_id': {'key': 'referrer_user_id', 'type': 'str'},
        'campaign_content_id': {'key': 'campaign_content_id', 'type': 'str'},
        'campaign_status': {'key': 'campaign_status', 'type': 'str'},
        'campaign_profile': {'key': 'campaign_profile', 'type': 'object'},
        'campaign_summary': {'key': 'campaign_summary', 'type': 'str'},
        'campaign_summary_unsafe': {'key': 'campaign_summary_unsafe', 'type': 'str'},
        'campaign_creation_name': {'key': 'campaign_creation_name', 'type': 'str'},
        'campaign_pay_per_name': {'key': 'campaign_pay_per_name', 'type': 'str'},
        'campaign_one_liner': {'key': 'campaign_one_liner', 'type': 'str'},
        'campaign_main_video_url': {'key': 'campaign_main_video_url', 'type': 'str'},
        'campaign_main_video_embed': {'key': 'campaign_main_video_embed', 'type': 'str'},
        'campaign_thanks_video_url': {'key': 'campaign_thanks_video_url', 'type': 'str'},
        'campaign_thanks_video_embed': {'key': 'campaign_thanks_video_embed', 'type': 'str'},
        'campaign_thanks_msg': {'key': 'campaign_thanks_msg', 'type': 'str'},
        'campaign_thanks_msg_unsafe': {'key': 'campaign_thanks_msg_unsafe', 'type': 'str'},
        'campaign_is_monthly': {'key': 'campaign_is_monthly', 'type': 'bool'},
        'campaign_is_nsfw': {'key': 'campaign_is_nsfw', 'type': 'bool'},
        'campaign_created_at': {'key': 'campaign_created_at', 'type': 'str'},
        'campaign_published_at': {'key': 'campaign_published_at', 'type': 'str'},
        'campaign_reverted_at': {'key': 'campaign_reverted_at', 'type': 'str'},
        'campaign_is_frozen': {'key': 'campaign_is_frozen', 'type': 'bool'},
        'campaign_is_pre_paid': {'key': 'campaign_is_pre_paid', 'type': 'bool'},
        'campaign_is_cuf': {'key': 'campaign_is_cuf', 'type': 'bool'},
        'campaign_is_plural': {'key': 'campaign_is_plural', 'type': 'bool'},
        'campaign_charge_upfront_enabled_at': {'key': 'campaign_charge_upfront_enabled_at', 'type': 'str'},
        'campaign_earnings_visibility': {'key': 'campaign_earnings_visibility', 'type': 'str'},
        'campaign_display_patron_goals': {'key': 'campaign_display_patron_goals', 'type': 'str'},
        'campaign_fee_schedule_id': {'key': 'campaign_fee_schedule_id', 'type': 'str'},
        'campaign_age_days': {'key': 'campaign_age_days', 'type': 'int'},
        'campaign_pledge_sum10_weeks': {'key': 'campaign_pledge_sum_10_weeks', 'type': 'float'},
        'campaign_pledge_sum1_day': {'key': 'campaign_pledge_sum_1_day', 'type': 'float'},
        'campaign_total_rewards_count': {'key': 'campaign_total_rewards_count', 'type': 'int'},
        'campaign_total_goals_count': {'key': 'campaign_total_goals_count', 'type': 'int'},
        'campaign_total_patron_goals_count': {'key': 'campaign_total_patron_goals_count', 'type': 'int'},
        'current_balance': {'key': 'current_balance', 'type': 'int'},
        'service': {'key': 'service', 'type': 'str'},
        'merchant_name': {'key': 'merchant_name', 'type': 'str'},
        'fingerprint': {'key': 'fingerprint', 'type': 'str'},
        'payment_methods': {'key': 'payment_methods', 'type': '[object]'},
        'login_status': {'key': 'login_status', 'type': 'str'},
        'verification_status': {'key': 'verification_status', 'type': 'str'},
        'verification_type': {'key': 'verification_type', 'type': 'str'},
        'post_content_id': {'key': 'post_content_id', 'type': 'str'},
        'post_status': {'key': 'post_status', 'type': 'str'},
        'post_type': {'key': 'post_type', 'type': 'str'},
        'post': {'key': 'post', 'type': 'object'},
        'post_activity_title': {'key': 'post_activity_title', 'type': 'str'},
        'post_activity_content': {'key': 'post_activity_content', 'type': 'str'},
        'post_comment_count': {'key': 'post_comment_count', 'type': 'str'},
        'post_min_cents_pledged_to_view': {'key': 'post_min_cents_pledged_to_view', 'type': 'str'},
        'post_like_count': {'key': 'post_like_count', 'type': 'str'},
        'post_link_url': {'key': 'post_link_url', 'type': 'str'},
        'post_link_domain': {'key': 'post_link_domain', 'type': 'str'},
        'post_link_subject': {'key': 'post_link_subject', 'type': 'str'},
        'post_link_description': {'key': 'post_link_description', 'type': 'str'},
        'post_link_embed': {'key': 'post_link_embed', 'type': 'str'},
        'post_is_paid': {'key': 'post_is_paid', 'type': 'bool'},
        'post_was_posted_by_campaign_owner': {'key': 'post_was_posted_by_campaign_owner', 'type': 'bool'},
        'user_name': {'key': 'user_name', 'type': 'str'},
        'amount': {'key': 'amount', 'type': 'int'},
        'currency_code': {'key': 'currency_code', 'type': 'str'},
        'expedited_shipping': {'key': 'expedited_shipping', 'type': 'bool'},
        'items': {'key': 'items', 'type': '[object]'},
        'shipping_method': {'key': 'shipping_method', 'type': 'str'},
        'is_first_time_buyer': {'key': 'is_first_time_buyer', 'type': 'bool'},
        'charge_cadence': {'key': 'charge_cadence', 'type': 'str'},
        'creator_user_id': {'key': 'creator_user_id', 'type': 'int'},
        'creator_name': {'key': 'creator_name', 'type': 'str'},
        'patronage_amount': {'key': 'patronage_amount', 'type': 'int'},
        'campaign_total_patrons': {'key': 'campaign_total_patrons', 'type': 'int'},
        'campaign_total_pledged': {'key': 'campaign_total_pledged', 'type': 'int'},
        'campaign_pledge_ratio': {'key': 'campaign_pledge_ratio', 'type': 'str'},
        'reward_pledge_ratio': {'key': 'reward_pledge_ratio', 'type': 'float'},
        'reward_pledge_offset': {'key': 'reward_pledge_offset', 'type': 'float'},
        'exemptions': {'key': 'exemptions', 'type': '[object]'},
        'creator_exemptions': {'key': 'creator_exemptions', 'type': '[object]'},
        'total_pledge_amount_usd': {'key': 'total_pledge_amount_usd', 'type': 'int'},
        'campaign_owner': {'key': 'campaign_owner', 'type': 'bool'},
        'teammates': {'key': 'teammates', 'type': '[object]'},
        'campaign_age_seconds': {'key': 'campaign_age_seconds', 'type': 'float'},
        'campaign_currency_code': {'key': 'campaign_currency_code', 'type': 'str'},
        'campaign_has_intro_video': {'key': 'campaign_has_intro_video', 'type': 'bool'},
        'campaign_has_youtube_video_in_about': {'key': 'campaign_has_youtube_video_in_about', 'type': 'bool'},
        'campaign_id': {'key': 'campaign_id', 'type': 'int'},
        'campaign_is_per_post': {'key': 'campaign_is_per_post', 'type': 'bool'},
        'campaign_launched_age_seconds': {'key': 'campaign_launched_age_seconds', 'type': 'float'},
        'campaign_new_pledges10_week_count': {'key': 'campaign_new_pledges_10_week_count', 'type': 'int'},
        'campaign_new_pledges10_week_usd': {'key': 'campaign_new_pledges_10_week_usd', 'type': 'int'},
        'campaign_new_pledges1_day_count': {'key': 'campaign_new_pledges_1_day_count', 'type': 'int'},
        'campaign_new_pledges1_day_usd': {'key': 'campaign_new_pledges_1_day_usd', 'type': 'int'},
        'campaign_new_pledges1_hour_count': {'key': 'campaign_new_pledges_1_hour_count', 'type': 'int'},
        'campaign_new_pledges1_hour_usd': {'key': 'campaign_new_pledges_1_hour_usd', 'type': 'int'},
        'campaign_new_pledges1_week_count': {'key': 'campaign_new_pledges_1_week_count', 'type': 'int'},
        'campaign_new_pledges1_week_usd': {'key': 'campaign_new_pledges_1_week_usd', 'type': 'int'},
        'campaign_new_pledges5_min_count': {'key': 'campaign_new_pledges_5_min_count', 'type': 'int'},
        'campaign_new_pledges5_min_usd': {'key': 'campaign_new_pledges_5_min_usd', 'type': 'int'},
        'campaign_page_word_count': {'key': 'campaign_page_word_count', 'type': 'int'},
        'campaign_patrons_fraudsters': {'key': 'campaign_patrons_fraudsters', 'type': 'int'},
        'campaign_patrons_not_fraudsters': {'key': 'campaign_patrons_not_fraudsters', 'type': 'int'},
        'campaign_post_count': {'key': 'campaign_post_count', 'type': 'int'},
        'campaign_reading_grade_level': {'key': 'campaign_reading_grade_level', 'type': 'float'},
        'campaign_thanks_word_count': {'key': 'campaign_thanks_word_count', 'type': 'int'},
        'campaign_tier_count': {'key': 'campaign_tier_count', 'type': 'int'},
        'campaign_tier_word_count': {'key': 'campaign_tier_word_count', 'type': 'int'},
        'created_at': {'key': 'created_at', 'type': 'str'},
        'creator_account_age_seconds': {'key': 'creator_account_age_seconds', 'type': 'float'},
        'creator_campaigns_followed_count': {'key': 'creator_campaigns_followed_count', 'type': 'int'},
        'creator_email_age_score': {'key': 'creator_email_age_score', 'type': 'int'},
        'creator_email_domain': {'key': 'creator_email_domain', 'type': 'str'},
        'creator_email_local_pattern': {'key': 'creator_email_local_pattern', 'type': 'str'},
        'creator_email_local_zxcvbn_guesses_log10': {'key': 'creator_email_local_zxcvbn_guesses_log10', 'type': 'float'},
        'creator_email_local_zxcvbn_score': {'key': 'creator_email_local_zxcvbn_score', 'type': 'float'},
        'creator_external_service_has_discord_oauth': {'key': 'creator_external_service_has_discord_oauth', 'type': 'bool'},
        'creator_external_service_has_facebook_oauth': {'key': 'creator_external_service_has_facebook_oauth', 'type': 'bool'},
        'creator_external_service_has_instagram_oauth': {'key': 'creator_external_service_has_instagram_oauth', 'type': 'bool'},
        'creator_external_service_has_reddit_oauth': {'key': 'creator_external_service_has_reddit_oauth', 'type': 'bool'},
        'creator_external_service_has_twitch_oauth': {'key': 'creator_external_service_has_twitch_oauth', 'type': 'bool'},
        'creator_external_service_has_twitter_oauth': {'key': 'creator_external_service_has_twitter_oauth', 'type': 'bool'},
        'creator_external_service_has_youtube_oauth': {'key': 'creator_external_service_has_youtube_oauth', 'type': 'bool'},
        'creator_has_sms_verification': {'key': 'creator_has_sms_verification', 'type': 'bool'},
        'creator_most_recent_ip_address_city': {'key': 'creator_most_recent_ip_address_city', 'type': 'str'},
        'creator_most_recent_ip_address_country': {'key': 'creator_most_recent_ip_address_country', 'type': 'str'},
        'creator_payment_instrument_added_count': {'key': 'creator_payment_instrument_added_count', 'type': 'int'},
        'creator_payouts10_week_count': {'key': 'creator_payouts_10_week_count', 'type': 'int'},
        'creator_payouts10_week_usd': {'key': 'creator_payouts_10_week_usd', 'type': 'float'},
        'creator_payouts1_day_count': {'key': 'creator_payouts_1_day_count', 'type': 'int'},
        'creator_payouts1_day_usd': {'key': 'creator_payouts_1_day_usd', 'type': 'int'},
        'creator_payouts1_hour_count': {'key': 'creator_payouts_1_hour_count', 'type': 'int'},
        'creator_payouts1_hour_usd': {'key': 'creator_payouts_1_hour_usd', 'type': 'int'},
        'creator_payouts1_week_count': {'key': 'creator_payouts_1_week_count', 'type': 'int'},
        'creator_payouts1_week_usd': {'key': 'creator_payouts_1_week_usd', 'type': 'float'},
        'creator_payouts5_min_count': {'key': 'creator_payouts_5_min_count', 'type': 'int'},
        'creator_payouts5_min_usd': {'key': 'creator_payouts_5_min_usd', 'type': 'int'},
        'creator_paypal_instument_local_fuzz_ratio': {'key': 'creator_paypal_instument_local_fuzz_ratio', 'type': 'int'},
        'creator_paypal_instument_matches_email': {'key': 'creator_paypal_instument_matches_email', 'type': 'bool'},
        'creator_paypal_instument_matches_email_domain': {'key': 'creator_paypal_instument_matches_email_domain', 'type': 'bool'},
        'creator_phone_score': {'key': 'creator_phone_score', 'type': 'int'},
        'creator_phone_type': {'key': 'creator_phone_type', 'type': 'str'},
        'creator_recent_sift_payment_abuse_score': {'key': 'creator_recent_sift_payment_abuse_score', 'type': 'float'},
        'creator_recent_sift_payment_abuse_score_age_seconds': {'key': 'creator_recent_sift_payment_abuse_score_age_seconds', 'type': 'float'},
        'creator_recent_sift_payment_abuse_score_reason': {'key': 'creator_recent_sift_payment_abuse_score_reason', 'type': 'str'},
        'creator_recent_sift_score_age_seconds': {'key': 'creator_recent_sift_score_age_seconds', 'type': 'float'},
        'creator_recent_sift_score_legacy': {'key': 'creator_recent_sift_score_legacy', 'type': 'float'},
        'creator_recent_sift_score_reason': {'key': 'creator_recent_sift_score_reason', 'type': 'str'},
        'fired_at': {'key': 'fired_at', 'type': 'float'},
        'ip_address': {'key': 'ip_address', 'type': 'str'},
        'ip_address_city': {'key': 'ip_address_city', 'type': 'str'},
        'ip_address_country': {'key': 'ip_address_country', 'type': 'str'},
        'lifetime_payouts_amount_usd': {'key': 'lifetime_payouts_amount_usd', 'type': 'float'},
        'lifetime_payouts_count': {'key': 'lifetime_payouts_count', 'type': 'str'},
        'patron_account_age_seconds': {'key': 'patron_account_age_seconds', 'type': 'float'},
        'patron_campaigns_followed_count': {'key': 'patron_campaigns_followed_count', 'type': 'int'},
        'patron_creator_email_local_fuzz_ratio': {'key': 'patron_creator_email_local_fuzz_ratio', 'type': 'int'},
        'patron_email_domain': {'key': 'patron_email_domain', 'type': 'str'},
        'patron_email_local_pattern': {'key': 'patron_email_local_pattern', 'type': 'str'},
        'patron_email_local_zxcvbn_guesses_log10': {'key': 'patron_email_local_zxcvbn_guesses_log10', 'type': 'float'},
        'patron_email_local_zxcvbn_score': {'key': 'patron_email_local_zxcvbn_score', 'type': 'int'},
        'patron_external_service_has_discord_oauth': {'key': 'patron_external_service_has_discord_oauth', 'type': 'bool'},
        'patron_external_service_has_facebook_oauth': {'key': 'patron_external_service_has_facebook_oauth', 'type': 'bool'},
        'patron_external_service_has_instagram_oauth': {'key': 'patron_external_service_has_instagram_oauth', 'type': 'bool'},
        'patron_external_service_has_reddit_oauth': {'key': 'patron_external_service_has_reddit_oauth', 'type': 'bool'},
        'patron_external_service_has_twitch_oauth': {'key': 'patron_external_service_has_twitch_oauth', 'type': 'bool'},
        'patron_external_service_has_twitter_oauth': {'key': 'patron_external_service_has_twitter_oauth', 'type': 'bool'},
        'patron_external_service_has_youtube_oauth': {'key': 'patron_external_service_has_youtube_oauth', 'type': 'bool'},
        'patron_has_campaign': {'key': 'patron_has_campaign', 'type': 'bool'},
        'patron_has_sms_verification': {'key': 'patron_has_sms_verification', 'type': 'bool'},
        'patron_payment_instrument_added_count': {'key': 'patron_payment_instrument_added_count', 'type': 'int'},
        'patron_payment_instrument_age_seconds': {'key': 'patron_payment_instrument_age_seconds', 'type': 'float'},
        'patron_recent_sift_payment_abuse_score': {'key': 'patron_recent_sift_payment_abuse_score', 'type': 'float'},
        'patron_recent_sift_payment_abuse_score_age_seconds': {'key': 'patron_recent_sift_payment_abuse_score_age_seconds', 'type': 'float'},
        'patron_recent_sift_payment_abuse_score_reason': {'key': 'patron_recent_sift_payment_abuse_score_reason', 'type': 'str'},
        'patron_recent_sift_score_age_seconds': {'key': 'patron_recent_sift_score_age_seconds', 'type': 'float'},
        'patron_recent_sift_score_legacy': {'key': 'patron_recent_sift_score_legacy', 'type': 'float'},
        'patron_recent_sift_score_reason': {'key': 'patron_recent_sift_score_reason', 'type': 'str'},
        'patron_user_id': {'key': 'patron_user_id', 'type': 'int'},
        'payment_instrument_last_four': {'key': 'payment_instrument_last_four', 'type': 'int'},
        'payment_instrument_merchant': {'key': 'payment_instrument_merchant', 'type': 'str'},
        'payment_instrument_other_user_count': {'key': 'payment_instrument_other_user_count', 'type': 'int'},
        'payment_instrument_service': {'key': 'payment_instrument_service', 'type': 'str'},
        'payout_instrument_added': {'key': 'payout_instrument_added', 'type': 'bool'},
        'pledge_amount_cents': {'key': 'pledge_amount_cents', 'type': 'int'},
        'pledge_amount_usd': {'key': 'pledge_amount_usd', 'type': 'int'},
        'pledge_has_tier': {'key': 'pledge_has_tier', 'type': 'bool'},
        'pledge_tier_amount_usd': {'key': 'pledge_tier_amount_usd', 'type': 'int'},
        'snapshot_id': {'key': 'snapshot_id', 'type': 'str'},
        'user_agent_browser': {'key': 'user_agent_browser', 'type': 'str'},
        'user_agent_device': {'key': 'user_agent_device', 'type': 'str'},
        'user_agent_os': {'key': 'user_agent_os', 'type': 'str'},
        'user_agent_os_version': {'key': 'user_agent_os_version', 'type': 'str'},
        'user_pledge_to_creators_fraudsters': {'key': 'user_pledge_to_creators_fraudsters', 'type': 'int'},
        'user_pledge_to_creators_not_fraudsters': {'key': 'user_pledge_to_creators_not_fraudsters', 'type': 'int'},
        'payment_instrument_country_code': {'key': 'payment_instrument_country_code', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FraudEvent, self).__init__(**kwargs)
        self.user_id = kwargs['user_id']
        self.event = kwargs['event']
        self.ip = kwargs.get('ip', None)
        self.session_id = kwargs.get('session_id', None)
        self.browser = kwargs.get('browser', None)
        self.device_id = kwargs.get('device_id', None)
        self.user_agent = kwargs.get('user_agent', None)
        self.request_uuid = kwargs.get('request_uuid', None)
        self.country_iso_code = kwargs.get('country_iso_code', None)
        self.city_code = kwargs.get('city_code', None)
        self.original_state = kwargs.get('original_state', None)
        self.object_state = kwargs.get('object_state', None)
        self.extra_data = kwargs.get('extra_data', None)
        self.user_email = kwargs.get('user_email', None)
        self.name = kwargs.get('name', None)
        self.phone_hash = kwargs.get('phone_hash', None)
        self.referrer_user_id = kwargs.get('referrer_user_id', None)
        self.campaign_content_id = kwargs.get('campaign_content_id', None)
        self.campaign_status = kwargs.get('campaign_status', None)
        self.campaign_profile = kwargs.get('campaign_profile', None)
        self.campaign_summary = kwargs.get('campaign_summary', None)
        self.campaign_summary_unsafe = kwargs.get('campaign_summary_unsafe', None)
        self.campaign_creation_name = kwargs.get('campaign_creation_name', None)
        self.campaign_pay_per_name = kwargs.get('campaign_pay_per_name', None)
        self.campaign_one_liner = kwargs.get('campaign_one_liner', None)
        self.campaign_main_video_url = kwargs.get('campaign_main_video_url', None)
        self.campaign_main_video_embed = kwargs.get('campaign_main_video_embed', None)
        self.campaign_thanks_video_url = kwargs.get('campaign_thanks_video_url', None)
        self.campaign_thanks_video_embed = kwargs.get('campaign_thanks_video_embed', None)
        self.campaign_thanks_msg = kwargs.get('campaign_thanks_msg', None)
        self.campaign_thanks_msg_unsafe = kwargs.get('campaign_thanks_msg_unsafe', None)
        self.campaign_is_monthly = kwargs.get('campaign_is_monthly', None)
        self.campaign_is_nsfw = kwargs.get('campaign_is_nsfw', None)
        self.campaign_created_at = kwargs.get('campaign_created_at', None)
        self.campaign_published_at = kwargs.get('campaign_published_at', None)
        self.campaign_reverted_at = kwargs.get('campaign_reverted_at', None)
        self.campaign_is_frozen = kwargs.get('campaign_is_frozen', None)
        self.campaign_is_pre_paid = kwargs.get('campaign_is_pre_paid', None)
        self.campaign_is_cuf = kwargs.get('campaign_is_cuf', None)
        self.campaign_is_plural = kwargs.get('campaign_is_plural', None)
        self.campaign_charge_upfront_enabled_at = kwargs.get('campaign_charge_upfront_enabled_at', None)
        self.campaign_earnings_visibility = kwargs.get('campaign_earnings_visibility', None)
        self.campaign_display_patron_goals = kwargs.get('campaign_display_patron_goals', None)
        self.campaign_fee_schedule_id = kwargs.get('campaign_fee_schedule_id', None)
        self.campaign_age_days = kwargs.get('campaign_age_days', None)
        self.campaign_pledge_sum10_weeks = kwargs.get('campaign_pledge_sum10_weeks', None)
        self.campaign_pledge_sum1_day = kwargs.get('campaign_pledge_sum1_day', None)
        self.campaign_total_rewards_count = kwargs.get('campaign_total_rewards_count', None)
        self.campaign_total_goals_count = kwargs.get('campaign_total_goals_count', None)
        self.campaign_total_patron_goals_count = kwargs.get('campaign_total_patron_goals_count', None)
        self.current_balance = kwargs.get('current_balance', None)
        self.service = kwargs.get('service', None)
        self.merchant_name = kwargs.get('merchant_name', None)
        self.fingerprint = kwargs.get('fingerprint', None)
        self.payment_methods = kwargs.get('payment_methods', None)
        self.login_status = kwargs.get('login_status', None)
        self.verification_status = kwargs.get('verification_status', None)
        self.verification_type = kwargs.get('verification_type', None)
        self.post_content_id = kwargs.get('post_content_id', None)
        self.post_status = kwargs.get('post_status', None)
        self.post_type = kwargs.get('post_type', None)
        self.post = kwargs.get('post', None)
        self.post_activity_title = kwargs.get('post_activity_title', None)
        self.post_activity_content = kwargs.get('post_activity_content', None)
        self.post_comment_count = kwargs.get('post_comment_count', None)
        self.post_min_cents_pledged_to_view = kwargs.get('post_min_cents_pledged_to_view', None)
        self.post_like_count = kwargs.get('post_like_count', None)
        self.post_link_url = kwargs.get('post_link_url', None)
        self.post_link_domain = kwargs.get('post_link_domain', None)
        self.post_link_subject = kwargs.get('post_link_subject', None)
        self.post_link_description = kwargs.get('post_link_description', None)
        self.post_link_embed = kwargs.get('post_link_embed', None)
        self.post_is_paid = kwargs.get('post_is_paid', None)
        self.post_was_posted_by_campaign_owner = kwargs.get('post_was_posted_by_campaign_owner', None)
        self.user_name = kwargs.get('user_name', None)
        self.amount = kwargs.get('amount', None)
        self.currency_code = kwargs.get('currency_code', None)
        self.expedited_shipping = kwargs.get('expedited_shipping', None)
        self.items = kwargs.get('items', None)
        self.shipping_method = kwargs.get('shipping_method', None)
        self.is_first_time_buyer = kwargs.get('is_first_time_buyer', None)
        self.charge_cadence = kwargs.get('charge_cadence', None)
        self.creator_user_id = kwargs.get('creator_user_id', None)
        self.creator_name = kwargs.get('creator_name', None)
        self.patronage_amount = kwargs.get('patronage_amount', None)
        self.campaign_total_patrons = kwargs.get('campaign_total_patrons', None)
        self.campaign_total_pledged = kwargs.get('campaign_total_pledged', None)
        self.campaign_pledge_ratio = kwargs.get('campaign_pledge_ratio', None)
        self.reward_pledge_ratio = kwargs.get('reward_pledge_ratio', None)
        self.reward_pledge_offset = kwargs.get('reward_pledge_offset', None)
        self.exemptions = kwargs.get('exemptions', None)
        self.creator_exemptions = kwargs.get('creator_exemptions', None)
        self.total_pledge_amount_usd = kwargs.get('total_pledge_amount_usd', None)
        self.campaign_owner = kwargs.get('campaign_owner', None)
        self.teammates = kwargs.get('teammates', None)
        self.campaign_age_seconds = kwargs.get('campaign_age_seconds', None)
        self.campaign_currency_code = kwargs.get('campaign_currency_code', None)
        self.campaign_has_intro_video = kwargs.get('campaign_has_intro_video', None)
        self.campaign_has_youtube_video_in_about = kwargs.get('campaign_has_youtube_video_in_about', None)
        self.campaign_id = kwargs.get('campaign_id', None)
        self.campaign_is_per_post = kwargs.get('campaign_is_per_post', None)
        self.campaign_launched_age_seconds = kwargs.get('campaign_launched_age_seconds', None)
        self.campaign_new_pledges10_week_count = kwargs.get('campaign_new_pledges10_week_count', None)
        self.campaign_new_pledges10_week_usd = kwargs.get('campaign_new_pledges10_week_usd', None)
        self.campaign_new_pledges1_day_count = kwargs.get('campaign_new_pledges1_day_count', None)
        self.campaign_new_pledges1_day_usd = kwargs.get('campaign_new_pledges1_day_usd', None)
        self.campaign_new_pledges1_hour_count = kwargs.get('campaign_new_pledges1_hour_count', None)
        self.campaign_new_pledges1_hour_usd = kwargs.get('campaign_new_pledges1_hour_usd', None)
        self.campaign_new_pledges1_week_count = kwargs.get('campaign_new_pledges1_week_count', None)
        self.campaign_new_pledges1_week_usd = kwargs.get('campaign_new_pledges1_week_usd', None)
        self.campaign_new_pledges5_min_count = kwargs.get('campaign_new_pledges5_min_count', None)
        self.campaign_new_pledges5_min_usd = kwargs.get('campaign_new_pledges5_min_usd', None)
        self.campaign_page_word_count = kwargs.get('campaign_page_word_count', None)
        self.campaign_patrons_fraudsters = kwargs.get('campaign_patrons_fraudsters', None)
        self.campaign_patrons_not_fraudsters = kwargs.get('campaign_patrons_not_fraudsters', None)
        self.campaign_post_count = kwargs.get('campaign_post_count', None)
        self.campaign_reading_grade_level = kwargs.get('campaign_reading_grade_level', None)
        self.campaign_thanks_word_count = kwargs.get('campaign_thanks_word_count', None)
        self.campaign_tier_count = kwargs.get('campaign_tier_count', None)
        self.campaign_tier_word_count = kwargs.get('campaign_tier_word_count', None)
        self.created_at = kwargs.get('created_at', None)
        self.creator_account_age_seconds = kwargs.get('creator_account_age_seconds', None)
        self.creator_campaigns_followed_count = kwargs.get('creator_campaigns_followed_count', None)
        self.creator_email_age_score = kwargs.get('creator_email_age_score', None)
        self.creator_email_domain = kwargs.get('creator_email_domain', None)
        self.creator_email_local_pattern = kwargs.get('creator_email_local_pattern', None)
        self.creator_email_local_zxcvbn_guesses_log10 = kwargs.get('creator_email_local_zxcvbn_guesses_log10', None)
        self.creator_email_local_zxcvbn_score = kwargs.get('creator_email_local_zxcvbn_score', None)
        self.creator_external_service_has_discord_oauth = kwargs.get('creator_external_service_has_discord_oauth', None)
        self.creator_external_service_has_facebook_oauth = kwargs.get('creator_external_service_has_facebook_oauth', None)
        self.creator_external_service_has_instagram_oauth = kwargs.get('creator_external_service_has_instagram_oauth', None)
        self.creator_external_service_has_reddit_oauth = kwargs.get('creator_external_service_has_reddit_oauth', None)
        self.creator_external_service_has_twitch_oauth = kwargs.get('creator_external_service_has_twitch_oauth', None)
        self.creator_external_service_has_twitter_oauth = kwargs.get('creator_external_service_has_twitter_oauth', None)
        self.creator_external_service_has_youtube_oauth = kwargs.get('creator_external_service_has_youtube_oauth', None)
        self.creator_has_sms_verification = kwargs.get('creator_has_sms_verification', None)
        self.creator_most_recent_ip_address_city = kwargs.get('creator_most_recent_ip_address_city', None)
        self.creator_most_recent_ip_address_country = kwargs.get('creator_most_recent_ip_address_country', None)
        self.creator_payment_instrument_added_count = kwargs.get('creator_payment_instrument_added_count', None)
        self.creator_payouts10_week_count = kwargs.get('creator_payouts10_week_count', None)
        self.creator_payouts10_week_usd = kwargs.get('creator_payouts10_week_usd', None)
        self.creator_payouts1_day_count = kwargs.get('creator_payouts1_day_count', None)
        self.creator_payouts1_day_usd = kwargs.get('creator_payouts1_day_usd', None)
        self.creator_payouts1_hour_count = kwargs.get('creator_payouts1_hour_count', None)
        self.creator_payouts1_hour_usd = kwargs.get('creator_payouts1_hour_usd', None)
        self.creator_payouts1_week_count = kwargs.get('creator_payouts1_week_count', None)
        self.creator_payouts1_week_usd = kwargs.get('creator_payouts1_week_usd', None)
        self.creator_payouts5_min_count = kwargs.get('creator_payouts5_min_count', None)
        self.creator_payouts5_min_usd = kwargs.get('creator_payouts5_min_usd', None)
        self.creator_paypal_instument_local_fuzz_ratio = kwargs.get('creator_paypal_instument_local_fuzz_ratio', None)
        self.creator_paypal_instument_matches_email = kwargs.get('creator_paypal_instument_matches_email', None)
        self.creator_paypal_instument_matches_email_domain = kwargs.get('creator_paypal_instument_matches_email_domain', None)
        self.creator_phone_score = kwargs.get('creator_phone_score', None)
        self.creator_phone_type = kwargs.get('creator_phone_type', None)
        self.creator_recent_sift_payment_abuse_score = kwargs.get('creator_recent_sift_payment_abuse_score', None)
        self.creator_recent_sift_payment_abuse_score_age_seconds = kwargs.get('creator_recent_sift_payment_abuse_score_age_seconds', None)
        self.creator_recent_sift_payment_abuse_score_reason = kwargs.get('creator_recent_sift_payment_abuse_score_reason', None)
        self.creator_recent_sift_score_age_seconds = kwargs.get('creator_recent_sift_score_age_seconds', None)
        self.creator_recent_sift_score_legacy = kwargs.get('creator_recent_sift_score_legacy', None)
        self.creator_recent_sift_score_reason = kwargs.get('creator_recent_sift_score_reason', None)
        self.fired_at = kwargs.get('fired_at', None)
        self.ip_address = kwargs.get('ip_address', None)
        self.ip_address_city = kwargs.get('ip_address_city', None)
        self.ip_address_country = kwargs.get('ip_address_country', None)
        self.lifetime_payouts_amount_usd = kwargs.get('lifetime_payouts_amount_usd', None)
        self.lifetime_payouts_count = kwargs.get('lifetime_payouts_count', None)
        self.patron_account_age_seconds = kwargs.get('patron_account_age_seconds', None)
        self.patron_campaigns_followed_count = kwargs.get('patron_campaigns_followed_count', None)
        self.patron_creator_email_local_fuzz_ratio = kwargs.get('patron_creator_email_local_fuzz_ratio', None)
        self.patron_email_domain = kwargs.get('patron_email_domain', None)
        self.patron_email_local_pattern = kwargs.get('patron_email_local_pattern', None)
        self.patron_email_local_zxcvbn_guesses_log10 = kwargs.get('patron_email_local_zxcvbn_guesses_log10', None)
        self.patron_email_local_zxcvbn_score = kwargs.get('patron_email_local_zxcvbn_score', None)
        self.patron_external_service_has_discord_oauth = kwargs.get('patron_external_service_has_discord_oauth', None)
        self.patron_external_service_has_facebook_oauth = kwargs.get('patron_external_service_has_facebook_oauth', None)
        self.patron_external_service_has_instagram_oauth = kwargs.get('patron_external_service_has_instagram_oauth', None)
        self.patron_external_service_has_reddit_oauth = kwargs.get('patron_external_service_has_reddit_oauth', None)
        self.patron_external_service_has_twitch_oauth = kwargs.get('patron_external_service_has_twitch_oauth', None)
        self.patron_external_service_has_twitter_oauth = kwargs.get('patron_external_service_has_twitter_oauth', None)
        self.patron_external_service_has_youtube_oauth = kwargs.get('patron_external_service_has_youtube_oauth', None)
        self.patron_has_campaign = kwargs.get('patron_has_campaign', None)
        self.patron_has_sms_verification = kwargs.get('patron_has_sms_verification', None)
        self.patron_payment_instrument_added_count = kwargs.get('patron_payment_instrument_added_count', None)
        self.patron_payment_instrument_age_seconds = kwargs.get('patron_payment_instrument_age_seconds', None)
        self.patron_recent_sift_payment_abuse_score = kwargs.get('patron_recent_sift_payment_abuse_score', None)
        self.patron_recent_sift_payment_abuse_score_age_seconds = kwargs.get('patron_recent_sift_payment_abuse_score_age_seconds', None)
        self.patron_recent_sift_payment_abuse_score_reason = kwargs.get('patron_recent_sift_payment_abuse_score_reason', None)
        self.patron_recent_sift_score_age_seconds = kwargs.get('patron_recent_sift_score_age_seconds', None)
        self.patron_recent_sift_score_legacy = kwargs.get('patron_recent_sift_score_legacy', None)
        self.patron_recent_sift_score_reason = kwargs.get('patron_recent_sift_score_reason', None)
        self.patron_user_id = kwargs.get('patron_user_id', None)
        self.payment_instrument_last_four = kwargs.get('payment_instrument_last_four', None)
        self.payment_instrument_merchant = kwargs.get('payment_instrument_merchant', None)
        self.payment_instrument_other_user_count = kwargs.get('payment_instrument_other_user_count', None)
        self.payment_instrument_service = kwargs.get('payment_instrument_service', None)
        self.payout_instrument_added = kwargs.get('payout_instrument_added', None)
        self.pledge_amount_cents = kwargs.get('pledge_amount_cents', None)
        self.pledge_amount_usd = kwargs.get('pledge_amount_usd', None)
        self.pledge_has_tier = kwargs.get('pledge_has_tier', None)
        self.pledge_tier_amount_usd = kwargs.get('pledge_tier_amount_usd', None)
        self.snapshot_id = kwargs.get('snapshot_id', None)
        self.user_agent_browser = kwargs.get('user_agent_browser', None)
        self.user_agent_device = kwargs.get('user_agent_device', None)
        self.user_agent_os = kwargs.get('user_agent_os', None)
        self.user_agent_os_version = kwargs.get('user_agent_os_version', None)
        self.user_pledge_to_creators_fraudsters = kwargs.get('user_pledge_to_creators_fraudsters', None)
        self.user_pledge_to_creators_not_fraudsters = kwargs.get('user_pledge_to_creators_not_fraudsters', None)
        self.payment_instrument_country_code = kwargs.get('payment_instrument_country_code', None)
        self.version = kwargs.get('version', None)


class HealthStatus(msrest.serialization.Model):
    """HealthStatus.

    All required parameters must be populated in order to send to Azure.

    :param state: Required. An enumeration. Possible values include: "Okay", "PartiallyWorking",
     "NotWorking".
    :type state: str or ~fraud_service.models.HealthState
    :param server: Required. Server.
    :type server: bool
    :param database: Database.
    :type database: bool
    """

    _validation = {
        'state': {'required': True},
        'server': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'server': {'key': 'server', 'type': 'bool'},
        'database': {'key': 'database', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthStatus, self).__init__(**kwargs)
        self.state = kwargs['state']
        self.server = kwargs['server']
        self.database = kwargs.get('database', True)


class HTTPValidationError(msrest.serialization.Model):
    """HTTPValidationError.

    :param detail: Detail.
    :type detail: list[~fraud_service.models.ValidationError]
    """

    _attribute_map = {
        'detail': {'key': 'detail', 'type': '[ValidationError]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HTTPValidationError, self).__init__(**kwargs)
        self.detail = kwargs.get('detail', None)


class PaymentInstrument(msrest.serialization.Model):
    """PaymentInstrument.

    All required parameters must be populated in order to send to Azure.

    :param instrument_id: Required. Instrument Id.
    :type instrument_id: str
    :param instrument_provider: Required. Instrument Provider.
    :type instrument_provider: str
    :param payment_type: Required. Payment Type.
    :type payment_type: str
    :param card: Card.
    :type card: ~fraud_service.models.Card
    :param bank_account: BankAccount.
    :type bank_account: ~fraud_service.models.BankAccount
    :param user: User.
    :type user: ~fraud_service.models.User
    """

    _validation = {
        'instrument_id': {'required': True},
        'instrument_provider': {'required': True},
        'payment_type': {'required': True},
    }

    _attribute_map = {
        'instrument_id': {'key': 'instrument_id', 'type': 'str'},
        'instrument_provider': {'key': 'instrument_provider', 'type': 'str'},
        'payment_type': {'key': 'payment_type', 'type': 'str'},
        'card': {'key': 'card', 'type': 'Card'},
        'bank_account': {'key': 'bank_account', 'type': 'BankAccount'},
        'user': {'key': 'user', 'type': 'User'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PaymentInstrument, self).__init__(**kwargs)
        self.instrument_id = kwargs['instrument_id']
        self.instrument_provider = kwargs['instrument_provider']
        self.payment_type = kwargs['payment_type']
        self.card = kwargs.get('card', None)
        self.bank_account = kwargs.get('bank_account', None)
        self.user = kwargs.get('user', None)


class Payout(msrest.serialization.Model):
    """Payout.

    All required parameters must be populated in order to send to Azure.

    :param user: Required. User.
    :type user: ~fraud_service.models.User
    :param payout_balance_cents_usd: Required. Payout Balance Cents Usd.
    :type payout_balance_cents_usd: int
    :param total_payout_cents_usd: Required. Total Payout Cents Usd.
    :type total_payout_cents_usd: int
    :param payout_service: Required. Payout Service.
    :type payout_service: str
    :param last_payout_timestamp: Last Payout Timestamp.
    :type last_payout_timestamp: float
    :param payout_locks: Payout Locks.
    :type payout_locks: list[object]
    :param exemptions: Exemptions.
    :type exemptions: list[object]
    """

    _validation = {
        'user': {'required': True},
        'payout_balance_cents_usd': {'required': True},
        'total_payout_cents_usd': {'required': True},
        'payout_service': {'required': True},
    }

    _attribute_map = {
        'user': {'key': 'user', 'type': 'User'},
        'payout_balance_cents_usd': {'key': 'payout_balance_cents_USD', 'type': 'int'},
        'total_payout_cents_usd': {'key': 'total_payout_cents_USD', 'type': 'int'},
        'payout_service': {'key': 'payout_service', 'type': 'str'},
        'last_payout_timestamp': {'key': 'last_payout_timestamp', 'type': 'float'},
        'payout_locks': {'key': 'payout_locks', 'type': '[object]'},
        'exemptions': {'key': 'exemptions', 'type': '[object]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Payout, self).__init__(**kwargs)
        self.user = kwargs['user']
        self.payout_balance_cents_usd = kwargs['payout_balance_cents_usd']
        self.total_payout_cents_usd = kwargs['total_payout_cents_usd']
        self.payout_service = kwargs['payout_service']
        self.last_payout_timestamp = kwargs.get('last_payout_timestamp', None)
        self.payout_locks = kwargs.get('payout_locks', None)
        self.exemptions = kwargs.get('exemptions', None)


class PayoutApproval(msrest.serialization.Model):
    """PayoutApproval.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. An enumeration. Possible values include: "new", "pending", "canceled",
     "approved", "needs_id_verification", "denied".
    :type status: str or ~fraud_service.models.Status
    :param payout_review_required: Required. Payout Review Required.
    :type payout_review_required: bool
    :param idv_required: Required. Idv Required.
    :type idv_required: bool
    :param idv_intent: Required. Any object.
    :type idv_intent: object
    """

    _validation = {
        'status': {'required': True},
        'payout_review_required': {'required': True},
        'idv_required': {'required': True},
        'idv_intent': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'payout_review_required': {'key': 'payout_review_required', 'type': 'bool'},
        'idv_required': {'key': 'idv_required', 'type': 'bool'},
        'idv_intent': {'key': 'idv_intent', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PayoutApproval, self).__init__(**kwargs)
        self.status = kwargs['status']
        self.payout_review_required = kwargs['payout_review_required']
        self.idv_required = kwargs['idv_required']
        self.idv_intent = kwargs['idv_intent']


class User(msrest.serialization.Model):
    """User.

    All required parameters must be populated in order to send to Azure.

    :param user_id: Required. User Id.
    :type user_id: int
    :param first_name: Required. First Name.
    :type first_name: str
    :param last_name: Required. Last Name.
    :type last_name: str
    :param created_at: Required. Created At.
    :type created_at: ~datetime.datetime
    :param country: Country.
    :type country: str
    :param email: Email.
    :type email: str
    :param status: Status.
    :type status: str
    :param exemptions: Exemptions.
    :type exemptions: list[object]
    :param payout_reviews: Payout Reviews.
    :type payout_reviews: list[object]
    """

    _validation = {
        'user_id': {'required': True},
        'first_name': {'required': True},
        'last_name': {'required': True},
        'created_at': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'user_id', 'type': 'int'},
        'first_name': {'key': 'first_name', 'type': 'str'},
        'last_name': {'key': 'last_name', 'type': 'str'},
        'created_at': {'key': 'created_at', 'type': 'iso-8601'},
        'country': {'key': 'country', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'exemptions': {'key': 'exemptions', 'type': '[object]'},
        'payout_reviews': {'key': 'payout_reviews', 'type': '[object]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(User, self).__init__(**kwargs)
        self.user_id = kwargs['user_id']
        self.first_name = kwargs['first_name']
        self.last_name = kwargs['last_name']
        self.created_at = kwargs['created_at']
        self.country = kwargs.get('country', None)
        self.email = kwargs.get('email', None)
        self.status = kwargs.get('status', None)
        self.exemptions = kwargs.get('exemptions', [])
        self.payout_reviews = kwargs.get('payout_reviews', [])


class ValidationError(msrest.serialization.Model):
    """ValidationError.

    All required parameters must be populated in order to send to Azure.

    :param loc: Required. Location.
    :type loc: list[str]
    :param msg: Required. Message.
    :type msg: str
    :param type: Required. Error Type.
    :type type: str
    """

    _validation = {
        'loc': {'required': True},
        'msg': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'loc': {'key': 'loc', 'type': '[str]'},
        'msg': {'key': 'msg', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ValidationError, self).__init__(**kwargs)
        self.loc = kwargs['loc']
        self.msg = kwargs['msg']
        self.type = kwargs['type']
